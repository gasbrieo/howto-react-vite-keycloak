/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SecureImport } from './routes/_secure'
import { Route as GuestImport } from './routes/_guest'
import { Route as SecureIndexImport } from './routes/_secure/index'
import { Route as SecureDashboardImport } from './routes/_secure/dashboard'
import { Route as GuestLoginImport } from './routes/_guest/login'

// Create/Update Routes

const SecureRoute = SecureImport.update({
  id: '/_secure',
  getParentRoute: () => rootRoute,
} as any)

const GuestRoute = GuestImport.update({
  id: '/_guest',
  getParentRoute: () => rootRoute,
} as any)

const SecureIndexRoute = SecureIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SecureRoute,
} as any)

const SecureDashboardRoute = SecureDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => SecureRoute,
} as any)

const GuestLoginRoute = GuestLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestImport
      parentRoute: typeof rootRoute
    }
    '/_secure': {
      id: '/_secure'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SecureImport
      parentRoute: typeof rootRoute
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginImport
      parentRoute: typeof GuestImport
    }
    '/_secure/dashboard': {
      id: '/_secure/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof SecureDashboardImport
      parentRoute: typeof SecureImport
    }
    '/_secure/': {
      id: '/_secure/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SecureIndexImport
      parentRoute: typeof SecureImport
    }
  }
}

// Create and export the route tree

interface GuestRouteChildren {
  GuestLoginRoute: typeof GuestLoginRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestLoginRoute: GuestLoginRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

interface SecureRouteChildren {
  SecureDashboardRoute: typeof SecureDashboardRoute
  SecureIndexRoute: typeof SecureIndexRoute
}

const SecureRouteChildren: SecureRouteChildren = {
  SecureDashboardRoute: SecureDashboardRoute,
  SecureIndexRoute: SecureIndexRoute,
}

const SecureRouteWithChildren =
  SecureRoute._addFileChildren(SecureRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof SecureRouteWithChildren
  '/login': typeof GuestLoginRoute
  '/dashboard': typeof SecureDashboardRoute
  '/': typeof SecureIndexRoute
}

export interface FileRoutesByTo {
  '': typeof GuestRouteWithChildren
  '/login': typeof GuestLoginRoute
  '/dashboard': typeof SecureDashboardRoute
  '/': typeof SecureIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_guest': typeof GuestRouteWithChildren
  '/_secure': typeof SecureRouteWithChildren
  '/_guest/login': typeof GuestLoginRoute
  '/_secure/dashboard': typeof SecureDashboardRoute
  '/_secure/': typeof SecureIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/dashboard' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/dashboard' | '/'
  id:
    | '__root__'
    | '/_guest'
    | '/_secure'
    | '/_guest/login'
    | '/_secure/dashboard'
    | '/_secure/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  GuestRoute: typeof GuestRouteWithChildren
  SecureRoute: typeof SecureRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  GuestRoute: GuestRouteWithChildren,
  SecureRoute: SecureRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_guest",
        "/_secure"
      ]
    },
    "/_guest": {
      "filePath": "_guest.tsx",
      "children": [
        "/_guest/login"
      ]
    },
    "/_secure": {
      "filePath": "_secure.tsx",
      "children": [
        "/_secure/dashboard",
        "/_secure/"
      ]
    },
    "/_guest/login": {
      "filePath": "_guest/login.tsx",
      "parent": "/_guest"
    },
    "/_secure/dashboard": {
      "filePath": "_secure/dashboard.tsx",
      "parent": "/_secure"
    },
    "/_secure/": {
      "filePath": "_secure/index.tsx",
      "parent": "/_secure"
    }
  }
}
ROUTE_MANIFEST_END */
